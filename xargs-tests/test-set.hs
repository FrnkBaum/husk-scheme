--
-- This file was automatically generated by the husk scheme compiler (huskc)
--
--  http://justinethier.github.io/husk-scheme 
--  (c) 2010 Justin Ethier 
--  Version 3.17.1
--
module Main where 
import Language.Scheme.Core  
import Language.Scheme.Numerical  
import Language.Scheme.Primitives  
import Language.Scheme.Types     -- Scheme data types  
import Language.Scheme.Variables -- Scheme variable operations  
import Control.Monad.Error  
import Data.Array  
import  qualified Data.ByteString as BS  
import Data.Complex  
import  qualified Data.Map  
import Data.Ratio  
import Data.Word  
import System.IO  
 
 
-- |Get variable at runtime 
getRTVar env var = do 
  v <- getVar env var 
  return $ case v of 
    List _ -> Pointer var env 
    DottedList _ _ -> Pointer var env 
    String _ -> Pointer var env 
    Vector _ -> Pointer var env 
    ByteVector _ -> Pointer var env 
    HashTable _ -> Pointer var env 
    _ -> v 
 
continueEval' env cont value = continueEval env cont value Nothing 
 
applyWrapper env cont (Nil _) (Just (a:as))  = do 
  apply cont a as 
 
applyWrapper env cont value (Just (a:as))  = do 
  apply cont a $ as ++ [value] 
 
getDataFileName' :: FilePath -> IO FilePath 
getDataFileName' name = return $ "/home/justin/.cabal/share/husk-scheme-3.17.1/" ++ name 
 
exec55_3 env cont _ _ = do 
  liftIO $ registerExtensions env getDataFileName' 
  continueEval env (makeCPSWArgs env cont exec []) (Nil "") Nothing
 
main :: IO () 
main = do 
  env <- r5rsEnv 
  result <- (runIOThrows $ liftM show $ hsInit env (makeNullContinuation env) (Nil "") Nothing) 
  case result of 
    Just errMsg -> putStrLn errMsg 
    _ -> return () 
 
hsInit env cont _ _ = do 
  _ <- defineVar env " modules " $ HashTable $ Data.Map.fromList [] 
  run env cont (Nil "") (Just [])
 
exec _ _ _ _ = return $ Nil ""

run :: Env -> LispVal -> LispVal -> Maybe [LispVal] -> IOThrowsError LispVal 
run env cont _ _  = do 
  result <- defineVar env "x" $ Number (1) 
  f596 env cont result (Just [])

f596 :: Env -> LispVal -> LispVal -> Maybe [LispVal] -> IOThrowsError LispVal 
f596 env cont _ _  = do 
  setFunc600 env cont (Nil "") (Just [])
Number (2)

setFuncMakeSet601 :: Env -> LispVal -> LispVal -> Maybe [LispVal] -> IOThrowsError LispVal 
setFuncMakeSet601 env cont result _  = do 
  _ <- setVar env "x" result 
  f599 env cont result (Just [])
