; TODO: prune down this list, then let's add stubs for each of the
;       r7rs libraries (char, cxr, etc). that at least makes the 
;       libraries sensible
(define-library (r5rs base)
    ; TODO: delete this line once below works: (export-all)
    (export
    *
    +
    -
    /
    ;=>
    ;binary-port?
    ;boolean=?
    ;bytevector-u8-set!
    ;call-with-port
    ;define-record-type
    ;define-syntax
    ;error-object-irritants
    ;error-object-message
    ;error-object?
    ;exact-integer-sqrt
    ;exact?
    ;features
    ;floor-remainder
    ;flush-output-port
    ;get-output-string
    ;guard
    ;inexact
    ;input-port-open?
    ;let-syntax
    ;letrec-syntax
    ;parameterize
    ;raise-continuable
    ;set!
    ;set-car!
    ;set-cdr!
    ;square
    ;string-set!
    ;syntax-error
    ;textual-port?
    ;truncate-quotient
    ;truncate/
    ;with-exception-handler
    <
    <=
    =
    >
    >=
    abs
    and
    append
    apply
    assoc
    assq
    assv
    begin
    boolean?
    bytevector
    bytevector-append
    bytevector-copy
    bytevector-copy!
    bytevector-length
    bytevector-u8-ref
    bytevector?
    caar
    cadr
    call-with-current-continuation
    call-with-values
    call/cc
    car
    case
    cdar
    cddr
    cdr
    ceiling
    char->integer
    char-ready?
    char<=?
    char<?
    char=?
    char>=?
    char>?
    char?
    close-input-port
    close-output-port
    ;close-port
    complex?
    cond
    ;cond-expand
    cons
    ;current-error-port
    current-input-port
    current-output-port
    define
    define-values
    denominator
    do
    dynamic-wind
    ;else
    ;eof-object
    eof-object?
    eq?
    equal?
    eqv?
    error
    even?
    ;exact
    exact->inexact ; r5rs definition
    exact-integer?
    expt
    ;file-error?
    floor
    ;floor-quotient
    ;floor/
    for-each
    gcd
    ;get-output-bytevector
    if
    import
    include
    include-ci
    inexact->exact ; r5rs definition
    inexact?
    input-port?
    integer->char
    integer?
    lambda
    lcm
    length
    let
    let*
    let*-values
    let-values
    letrec
    letrec*
    list
    list->string
    list->vector
    list-copy
    list-ref
    list-set!
    list-tail
    list?
    make-bytevector
    make-list
    make-parameter
    make-string
    make-vector
    map
    max
    member
    memq
    memv
    min
    modulo
    negative?
    newline
    not
    null?
    number->string
    number?
    numerator
    odd?
    open-input-bytevector
    open-input-string
    open-output-bytevector
    open-output-string
    or
    output-port-open?
    output-port?
    pair?
    peek-char
    peek-u8
    port?
    positive?
    procedure?
    quasiquote
    quote
    quotient
    raise
    rational?
    rationalize
    read-bytevector
    read-bytevector!
    read-char
    read-error?
    read-line
    read-string
    read-u8
    real?
    remainder
    reverse
    round
    string
    string->list
    string->number
    string->symbol
    string->utf8
    string->vector
    string-append
    string-copy
    string-copy!
    string-fill!
    string-for-each
    string-length
    string-map
    string-ref
    string<=?
    string<?
    string=?
    string>=?
    string>?
    string?
    substring
    symbol->string
    symbol=?
    symbol?
    syntax-rules
    truncate
    truncate-remainder
    u8-ready?
    unless
    unquote
    unquote-splicing
    utf8->string
    values
    vector
    vector->list
    vector->string
    vector-append
    vector-copy
    vector-copy!
    vector-fill!
    vector-for-each
    vector-length
    vector-map
    vector-ref
    ;vector-set!
    vector?
    when
    write-bytevector
    write-char
    write-string
    write-u8
    zero?
    )
    (import (r5rs)))
